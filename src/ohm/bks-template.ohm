BKS {
  Scripts
    =   Declare     LogicBlock*  

  LogicBlock
    = Comment 
        | GoodsBlock -- GoodsBlock
        | FnBlocks+                      -- FnBlocks
        
        
        FnBlocks = (~"[goods") "[" fnBkName "]"  FnContent

        GoodsBlock =  "["caseInsensitive<"goods">"]" goodsItem*

		noLineSpace = (" "  | "	" |"\t") *
        goodsItem =  ( noLineSpace  itemName noLineSpace  quantity noLineSpace  quantity  noLineSpace newLine )
        newLine = ("\n" | "\r")
        fnBkName =   functionName --NormalCall
                                | "~"functionName --Callback
                                
        FnContent = ~(newLine"[") FnContentDetail

        

        FnContentDetail =  SayContentWrap? ActContentWrap? SayContentWrap? IfWrap* // todo not strict
        ActContentWrap = ( "#"caseInsensitive<"act"> ) ActContent
        SayContentWrap = ( "#"caseInsensitive<"say"> )? SayContent
        

        IF = "#"caseInsensitive<"IF">
        
        IfWrap =  IF ThenDoWrap ElseDoWrap --UselessIf    
        |  IF IfExp ThenDoWrap ElseDoWrap  --IfElse
        
        ActionBlocks =  SayWrap | ActWrap
        ThenDoWrap = (&ThenDo ActionBlocks)+ // multi : #SAY... #ACT...
        ElseDoWrap = (&ElseDo ActionBlocks)* // 0 :no else ; multi: same as abobe, ? only HEADER
        DoBreak = "break"
        
        
        ThenDo = ("#"caseInsensitive<"say">)  | ("#"caseInsensitive<"act">)
        ElseDo = ("#"caseInsensitive<"elseAct">)  | ("#"caseInsensitive<"elseSay">)
        
        ActHeader =  ("#"caseInsensitive<"elseAct">) | ("#"caseInsensitive<"act">) // todo case #caseInsensitive<"ELSEACT">
        SayHeader =  ("#"caseInsensitive<"say">) | ("#"caseInsensitive<"elseSay">)
        
        SayWrap = SayHeader SayContent
        ActWrap= ActHeader ActContent
        SayContent =  (~"#") (Comment | sayBindingWrap | sayText)+
        sayBindingWrap = "<"spaces(sayStrBindingLVar | sayBindingBtn | sayBindingText )spaces">"
        sayBindingBtn = sayTextChars+ "/" functionNameSPNO
        sayBindingText = "$"("LORD"| "OWNERGUILD" | "USERNAME" | "UPGRADEWEAPONFEE" | "USERWEAPON" | "GUILDWARFEE" | "CASTLEWARDATE" | "TODAYINCOME" | "CASTLEGOLD" | "CASTLEDOORSTATE" | "REPAIRDOORGOLD" | "REPAIRWALLGOLD" | "GUARDFEE" | "ARCHERFEE" | "GUARDRULE" | "LISTOFWAR")
        sayStrBindingLVar =  "$STR("lVar")" //  <$STR(D0)> \
        sayText = (sayNewLine | sayTextChars | "\r"|"\n"| "/" )+
        sayNewLine = "\\"
        sayTextChars = (~("[@" | "[goods"| "[~")) (letter|number | "《" |  "　" | "》"  | "－" | "[" | "]" | "^"  | "_" | "。"| "…"  | "、" | "，" | "+"  | "\"" | "。"|"？"| "?"  | "！" | "!"| "@" | "." | "," | "(" | ")" |"（" | "）" | " "  | "->" | "-" | "{" | "}" | ":" | "%" | "~" | "“" | "”" | "：" | "'" | "；")
        ActContent =  (
          MonGen 
        | Takecheckitem 
        | Batchmove | Addbatch | BatchDelay | Playdice | MoveMapPos  | Goto | MonClear 
        | SetGVar | MoveMap| MoveLVar | IncLVar | DecLVar | SumVar | ResetGVar | ExchangeMap
        | TimeRecallByMins | BreakTimeRecall | Recallmap
        | Param1  |   Param2  | Param3  
        | CloseWindow
        | DoBreak
        | MoveLVarRandom | TakeItemw | TakeItem  | GiveItem | Comment )*
        

  IfExp
    = CheckExp+
    
    
    
    
    CheckExp = CheckGVar | CheckLVar
    					|  Checkgold
                        |  Checkitemw 
                        |  Checkpkpoint
                        |  Checkbaggage
                        |  Checklevel
                        |  EqualLVar
                        |  LargeLVar
                        | SmallLVar
                        |  Checkitem
                        | Checkdura
                        | Istakeitem
                        | CheckGender
                        | CheckDaytime
                        | RandomIs
                        | Checkunit
                        | Checkmonmap
                        | Checkhum
                        | Checkjob
                        | Checkluckypoint
                        | CheckDayofweek
                        | CheckHour
    
    CheckDaytime = caseInsensitive<"daytime"> dayTimeEnum
    CheckHour = caseInsensitive<"hour"> number number?
    CheckDayofweek = caseInsensitive<"dayofweek"> dayEnum
    dayEnum = (caseInsensitive<"Sunday"> | caseInsensitive<"Monday"> | caseInsensitive<"Tuesday"> |  caseInsensitive<"Wednesday">  |  caseInsensitive<"Thursday"> |  caseInsensitive<"Friday"> | caseInsensitive<"Saturday">)
    Checkluckypoint = caseInsensitive<"Checkluckypoint"> number
    dayTimeEnum =  caseInsensitive<"sunset"> | caseInsensitive<"day">  |  caseInsensitive<"sunrise">| caseInsensitive<"sunraise"> | caseInsensitive<"night">
    RandomIs = caseInsensitive<"random"> number
    CheckGender = caseInsensitive<"gender"> "man"
    CheckGVar = caseInsensitive<"check"> gVar gVarRange
    CheckLVar = caseInsensitive<"check"> lVar lVarRange
    Checkunit = caseInsensitive<"checkunit"> gVar gVarRange
    Checkgold = caseInsensitive<"checkgold"> quantity
    Checkdura =  (caseInsensitive<"checkduraeva"> | caseInsensitive<"checkdura">) itemName quantity // both are one thing
    Checkitem = caseInsensitive<"checkitem"> itemName quantity
    Checkpkpoint= caseInsensitive<"Checkpkpoint"> quantity
    Checkbaggage= caseInsensitive<"checkbaggage">
    Checklevel= caseInsensitive<"checklevel"> quantity
    Checkjob= caseInsensitive<"checkjob"> jobsEnum
    Checkhum= caseInsensitive<"checkhum"> mapName quantity
    BatchDelay = caseInsensitive<"batchDelay"> quantity
    Checkmonmap = caseInsensitive<"checkmonmap"> mapName quantity
    Addbatch  = caseInsensitive<"addbatch"> mapName
    Batchmove  = caseInsensitive<"batchmove">

    Istakeitem = caseInsensitive<"istakeitem"> itemName
    TimeRecallByMins = caseInsensitive<"timeRecall"> quantity // 5mins 
    Checkitemw = caseInsensitive<"checkitemw"> itemName quantity --normal 
    						|  caseInsensitive<"checkitemw"> WearPlaceName --wears
    TakeItemw =   caseInsensitive<"takew"> itemName quantity --normal 
               |  caseInsensitive<"takew"> WearPlaceName --wears 

    Playdice  = caseInsensitive<"playdice"> number functionName
    Param1  = caseInsensitive<"param1"> mapName  // 地图代码
    Param2  = caseInsensitive<"param2"> number  // x
    Param3  = caseInsensitive<"param3"> number  // y
    MonGen  = caseInsensitive<"mongen"> monsterName quantity quantity  // range quantity
    CloseWindow = caseInsensitive<"close"> // close windows
    ExchangeMap = caseInsensitive<"ExchangeMap"> mapName
    Recallmap = caseInsensitive<"Recallmap"> mapName
    
	  EqualLVar = caseInsensitive<"equal"> lVar lVarRange
    LargeLVar = caseInsensitive<"large"> lVar lVarRange
    SmallLVar = caseInsensitive<"small"> lVar lVarRange // 小于某函数值

    MoveLVar = caseInsensitive<"mov"> lVar lVarRange
    IncLVar = caseInsensitive<"inc"> lVar lVarRange
    DecLVar = caseInsensitive<"dec"> lVar lVarRange
    ResetGVar = caseInsensitive<"reset"> gVar gVarRange
    SumVar = caseInsensitive<"sum"> lVar lVar --SumTwoVars
    					| caseInsensitive<"sum"> lVar --SumToTarget 
    
    MoveLVarRandom = caseInsensitive<"movr"> lVar lVarRange
    SetGVar =  caseInsensitive<"set"> gVar gVarRange
    TakeItem = caseInsensitive<"take"> itemName quantity?
    Takecheckitem = caseInsensitive<"takecheckitem">
    GiveItem = caseInsensitive<"give"> itemName quantity?
    itemName = (letter | "(" | ")")+
    monsterName = (letter | number)+
    WearPlaceName = "[" ("NECKLACE"|"RING") "]"
    quantity = number
    // person
    MoveMapPos = caseInsensitive<"mapmove"> mapName number number
    
    MonClear = caseInsensitive<"monclear"> mapName
    Goto = caseInsensitive<"goto"> functionNameGoto
    BreakTimeRecall = caseInsensitive<"BreakTimeRecall">
    MoveMap = caseInsensitive<"Map"> mapName
    mapName = (letter|number)+
    
    gVar ="["number"]"
    lVar = (caseInsensitive<("p")>|caseInsensitive<("d")>)digit
    lVarRange = number
    gVarRange = number
    jobsEnum= (caseInsensitive<("warrior")> | caseInsensitive<("wizard")> | caseInsensitive<("taoist")>)
  
  Declare = Comment* ("(" decItems ")")? DDPercent? (listOf<DeclareDetails, (" "|  "\n" | "\r"  | Comment )+>)
  
  DeclareDetails =  "+"number
  
  number = "-"?digit+
  
  DDPercent = "%"number
  
  decItems = listOf<functionName, " "+>
  functionNameGoto = "@"? (letter|number|"_"|"-")+
  functionName = "@" (letter|number|"_"|"-")+
  functionNameSPNO = "@"? (letter|number|"_"|"-")*

  
  Comment = ";" comment_single     -- single
  
  comment_single = (~newLine any)+

}