BKS {
  Scripts
    =   Declare*     LogicBlock*  

  LogicBlock
    = Comment 
        | FnBlocks+                      -- FnBlocks
        
        
        FnBlocks =  "[" FnBkName "]"  FnContent
        
        FnBkName =   functionName --NormalCall
                                | "~"functionName --Callback
                                
                     
        
        FnContent = ~(("\n" | "\r")"[") FnContentDetail
        
        FnContentDetail =
         IfWrap --IfWrap
         | SayContent --DirectSayContent
        
        IfWrap =  IF ThenDoWrap ElseDoWrap IfBreak --UselessIf    
        |  IF IfExp ThenDoWrap ElseDoWrap  IfBreak --IfElse
        
        ActionBlocks =  SayWrap | ActWrap
        ThenDoWrap = (&ThenDo ActionBlocks)+
        ElseDoWrap = (&ElseDo ActionBlocks)*
        IfBreak = "break"?
        
        
        ThenDo = "#SAY"  | "#ACT"
        ElseDo = "#ELSEACT"  | "#ELSESAY"
        
        ActHeader =  "#ELSEACT" | "#ACT"
        SayHeader =  "#SAY" | "#ELSESAY"
        
        SayWrap = SayHeader SayContent
        ActWrap= ActHeader ActContent
        SayContent = (letter|number|"\r"|"\n"|" " |"，" | "。"|"？"| "\\" | "/" | "<" | ">" | "@" )+
        ActContent =  (Goto | MonClear | BreakTimeRecall|MoveMap| MoveVar | IncVar | DecVar | SumVar | MoveVarRandom | TakeItem | TakeItemw )+
        
          IF = "#IF" 
    ELSE = "#ELSEACT" 

  IfExp
    = CheckExp+
    
    
    
    
    CheckExp = CheckVar
    					|  Checkgold
                        |  Checkitem
                        |  Checkpkpoint
                        |  Checkbaggage
                        |  Checklevel
                        |  Equal
                        |  Large
                        | Checkitemw
                        | Checkdura
                        | Istakeitem
                        | CheckGender
    
    CheckGender = caseInsensitive<"gender"> "man"
    CheckVar = caseInsensitive<"check"> gVar gVarRange
    Checkgold = caseInsensitive<"checkgold"> Quantity
    Checkdura =  caseInsensitive<"checkdura"> ItemName Quantity
    Checkitem = caseInsensitive<"checkitem"> ItemName Quantity
    Checkpkpoint= caseInsensitive<"Checkpkpoint"> Quantity
    Checkbaggage= caseInsensitive<"checkbaggage">
    Checklevel= caseInsensitive<"checklevel"> Quantity
    Istakeitem = caseInsensitive<"istakeitem"> ItemName
    Checkitemw = caseInsensitive<"checkitemw"> ItemName Quantity --normal 
    						|  caseInsensitive<"checkitemw"> WearPlaceName --wears
    TakeItemw =  caseInsensitive<"takew"> ItemName Quantity --normal 
    						|  caseInsensitive<"takew"> WearPlaceName --wears
    
	Equal = caseInsensitive<"equal"> lVar lVarRange
    Large = caseInsensitive<"large"> lVar lVarRange
    
    MoveVar = caseInsensitive<"mov"> lVar lVarRange
    IncVar = caseInsensitive<"inc"> lVar lVarRange
    DecVar = caseInsensitive<"dec"> lVar lVarRange
    SumVar = caseInsensitive<"sum"> lVar lVar --SumTwoVars
    					| caseInsensitive<"sum"> lVar --SumToTarget 
    
    MoveVarRandom = caseInsensitive<"movr"> lVar lVarRange
    SetGVar =  caseInsensitive<"set"> gVar gVarRange
    TakeItem = caseInsensitive<"take"> ItemName Quantity
    ItemName = letter+
    WearPlaceName = "[" ("NECKLACE"|"RING") "]"
    Quantity = number
    
    
    MonClear = caseInsensitive<"monclear"> mapName
    Goto = caseInsensitive<"goto"> functionName
    BreakTimeRecall = caseInsensitive<"BreakTimeRecall">
    MoveMap = caseInsensitive<"Map"> mapName
    mapName = (letter|number)+
    
    gVar ="["number"]"
    lVar = (caseInsensitive<("p")>|caseInsensitive<("d")>)digit
    lVarRange = number
    gVarRange = ("1"|"0")
  
  Declare =  "(" decItems ")" DDPercent* (listOf<DeclareDetails, " "+>)
  
  DeclareDetails =  "+"number
  
  number = digit+
  
  DDPercent = "%"number
  
  decItems = listOf<functionName, " "+>
  functionName = "@" (letter|number|"_")+
  
  Comment = ";" comment_single     -- single
  
  comment_single = (~("\n" | "\r") any)+

}